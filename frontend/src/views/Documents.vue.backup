<template>
  <v-container fluid class="pa-6">
    <!-- Header with Statistics -->
    <v-row class="mb-6">
      <v-col cols="12" lg="8">
        <div class="d-flex align-center mb-4">
          <v-icon class="mr-3" size="40" color="primary">mdi-file-document-multiple</v-icon>
          <div>
            <h1 class="text-h3 text-primary">Gestionnaire de Documents</h1>
            <p class="text-h6 text-grey mb-0">Votre centre de gestion documentaire avancé</p>
          </div>
        </div>
        
        <!-- Quick Stats -->
        <v-row>
          <v-col cols="6" md="3">
            <v-card class="text-center pa-3" color="primary" variant="tonal">
              <v-icon size="32" class="mb-2">mdi-file-document</v-icon>
              <div class="text-h6">{{ documentStats.documents }}</div>
              <div class="text-caption">Documents</div>
            </v-card>
          </v-col>
          <v-col cols="6" md="3">
            <v-card class="text-center pa-3" color="amber" variant="tonal">
              <v-icon size="32" class="mb-2">mdi-folder</v-icon>
              <div class="text-h6">{{ documentStats.folders }}</div>
              <div class="text-caption">Dossiers</div>
            </v-card>
          </v-col>
          <v-col cols="6" md="3">
            <v-card class="text-center pa-3" color="green" variant="tonal">
              <v-icon size="32" class="mb-2">mdi-clock-recent</v-icon>
              <div class="text-h6">{{ documentStats.recent }}</div>
              <div class="text-caption">Récents</div>
            </v-card>
          </v-col>
          <v-col cols="6" md="3">
            <v-card class="text-center pa-3" color="purple" variant="tonal">
              <v-icon size="32" class="mb-2">mdi-tag-multiple</v-icon>
              <div class="text-h6">{{ documentStats.tags }}</div>
              <div class="text-caption">Tags</div>
            </v-card>
          </v-col>
        </v-row>
      </v-col>
      
      <v-col cols="12" lg="4">
        <!-- Quick Actions -->
        <v-card class="pa-4 h-100">
          <v-card-title class="pa-0 mb-3">Actions rapides</v-card-title>
          <div class="d-flex flex-column gap-2">
            <v-btn
              color="primary"
              size="large"
              prepend-icon="mdi-plus"
              @click="showCreateDialog = true"
              block
            >
              Nouveau document
            </v-btn>
            <v-btn
              color="secondary"
              size="large"
              prepend-icon="mdi-folder-plus"
              @click="showCreateFolderDialog = true"
              block
            >
              Nouveau dossier
            </v-btn>
            <v-btn
              variant="outlined"
              color="primary"
              size="large"
              prepend-icon="mdi-content-copy"
              @click="showTemplateDialog = true"
              block
            >
              Créer depuis un modèle
            </v-btn>
            <v-btn
              v-if="authStore.isAdmin"
              variant="outlined"
              color="warning"
              size="large"
              prepend-icon="mdi-upload"
              @click="showImportDialog = true"
              block
            >
              Importer des documents
            </v-btn>
          </div>
        </v-card>
      </v-col>
    </v-row>

    <!-- Breadcrumb Navigation -->
    <v-row v-if="currentPath.length > 0" class="mb-4">
      <v-col cols="12">
        <v-card class="pa-3">
          <v-breadcrumbs :items="breadcrumbItems" class="pa-0">
            <template v-slot:item="{ item }">
              <v-breadcrumbs-item
                :disabled="item.disabled"
                @click="navigateToFolder(item.folderId)"
              >
                <v-icon v-if="item.icon" :icon="item.icon" class="mr-1"></v-icon>
                {{ item.title }}
              </v-breadcrumbs-item>
            </template>
          </v-breadcrumbs>
        </v-card>
      </v-col>
    </v-row>

    <!-- Advanced Filters and Search -->
    <v-row class="mb-6">
      <v-col cols="12">
        <v-card class="pa-4">
          <v-row>
            <v-col cols="12" md="4">
              <v-text-field
                v-model="searchQuery"
                placeholder="Rechercher dans vos documents..."
                prepend-inner-icon="mdi-magnify"
                variant="outlined"
                density="comfortable"
                clearable
                @input="searchDocuments"
              ></v-text-field>
            </v-col>
            <v-col cols="12" md="2">
              <v-select
                v-model="filterType"
                :items="typeFilterOptions"
                label="Type"
                variant="outlined"
                density="comfortable"
                clearable
                @update:modelValue="applyFilters"
              ></v-select>
            </v-col>
            <v-col cols="12" md="2">
              <v-select
                v-model="sortBy"
                :items="sortOptions"
                label="Trier par"
                variant="outlined"
                density="comfortable"
                @update:modelValue="sortDocuments"
              ></v-select>
            </v-col>
            <v-col cols="12" md="2">
              <v-autocomplete
                v-model="filterTags"
                :items="availableTags"
                label="Tags"
                multiple
                chips
                variant="outlined"
                density="comfortable"
                @update:modelValue="applyFilters"
              ></v-autocomplete>
            </v-col>
            <v-col cols="12" md="2">
              <v-btn-toggle v-model="viewMode" mandatory density="comfortable" class="w-100">
                <v-btn value="table" prepend-icon="mdi-view-list">Liste</v-btn>
                <v-btn value="grid" prepend-icon="mdi-view-grid">Grille</v-btn>
              </v-btn-toggle>
            </v-col>
          </v-row>
        </v-card>
      </v-col>
    </v-row>

    <!-- Main Content Area -->
    <v-row>
      <v-col :cols="selectedDocument ? 8 : 12">
        <v-card class="elevation-3">
          <v-card-title class="d-flex justify-space-between align-center">
            <span>Documents ({{ filteredItems.length }})</span>
            <div>
              <v-btn
                variant="text"
                icon="mdi-refresh"
                @click="refreshDocuments"
              ></v-btn>
              <v-btn
                variant="text"
                icon="mdi-dots-vertical"
                @click="showBulkActions = !showBulkActions"
              ></v-btn>
            </div>
          </v-card-title>

          <!-- Bulk Actions -->
          <v-expand-transition>
            <v-card-text v-show="showBulkActions" class="pt-0">
              <v-chip-group v-model="selectedItems" multiple>
                <v-chip
                  v-for="item in filteredItems"
                  :key="item.id"
                  :value="item.id"
                  filter
                  variant="outlined"
                >
                  {{ item.name }}
                </v-chip>
              </v-chip-group>
              <div v-if="selectedItems.length > 0" class="mt-3">
                <v-btn
                  color="primary"
                  prepend-icon="mdi-archive"
                  @click="bulkArchive"
                  class="mr-2"
                >
                  Archiver ({{ selectedItems.length }})
                </v-btn>
                <v-btn
                  color="warning"
                  prepend-icon="mdi-tag"
                  @click="showBulkTagDialog = true"
                  class="mr-2"
                >
                  Ajouter des tags
                </v-btn>
                <v-btn
                  color="error"
                  prepend-icon="mdi-delete"
                  @click="bulkDelete"
                >
                  Supprimer
                </v-btn>
              </div>
            </v-card-text>
          </v-expand-transition>

          <v-card-text class="pa-0">
            <!-- Table View -->
            <template v-if="viewMode === 'table'">
              <v-data-table
                :headers="enhancedHeaders"
                :items="filteredItems"
                :loading="loading"
                item-value="id"
                class="elevation-0"
                @click:row="(event, { item }) => previewDocument(item)"
              >
                <template #no-data>
                  <div class="text-center py-12">
                    <v-icon size="80" color="grey-lighten-2" class="mb-4">mdi-folder-open</v-icon>
                    <h3 class="text-h5 mb-3">Aucun document trouvé</h3>
                    <p class="text-body-1 text-grey mb-6">Commencez par créer votre premier document ou dossier</p>
                    <div class="d-flex justify-center gap-3">
                      <v-btn
                        color="primary"
                        size="large"
                        prepend-icon="mdi-plus"
                        @click="showCreateDialog = true"
                      >
                        Nouveau document
                      </v-btn>
                      <v-btn
                        color="secondary"
                        size="large"
                        prepend-icon="mdi-folder-plus"
                        @click="showCreateFolderDialog = true"
                      >
                        Nouveau dossier
                      </v-btn>
                    </div>
                  </div>
                </template>

                <template #item.name="{ item }">
                  <div class="d-flex align-center">
                    <v-avatar class="mr-3" size="32" :color="item.type === 'folder' ? 'amber' : 'primary'">
                      <v-icon color="white">
                        {{ item.type === 'folder' ? 'mdi-folder' : getDocumentIcon(item) }}
                      </v-icon>
                    </v-avatar>
                    <div>
                      <div class="text-subtitle-1 font-weight-medium">{{ item.name }}</div>
                      <div v-if="item.description" class="text-caption text-grey">{{ item.description }}</div>
                    </div>
                  </div>
                </template>

                <template #item.type="{ item }">
                  <v-chip
                    :color="getTypeColor(item.type)"
                    variant="tonal"
                    size="small"
                    :prepend-icon="item.type === 'folder' ? 'mdi-folder' : getDocumentIcon(item)"
                  >
                    {{ getTypeLabel(item.type) }}
                  </v-chip>
                </template>

                <template #item.tags="{ item }">
                  <div v-if="item.tags && item.tags.length > 0">
                    <v-chip
                      v-for="tag in item.tags.slice(0, 3)"
                      :key="tag"
                      size="x-small"
                      class="mr-1"
                      variant="outlined"
                    >
                      {{ tag }}
                    </v-chip>
                    <v-chip
                      v-if="item.tags.length > 3"
                      size="x-small"
                      variant="outlined"
                    >
                      +{{ item.tags.length - 3 }}
                    </v-chip>
                  </div>
                </template>

                <template #item.size="{ item }">
                  <span v-if="item.type !== 'folder'">{{ formatFileSize(item.size) }}</span>
                  <span v-else class="text-grey">{{ item.itemCount || 0 }} éléments</span>
                </template>

                <template #item.author="{ item }">
                  <div class="d-flex align-center">
                    <v-avatar size="24" class="mr-2">
                      <span class="text-caption">{{ getAuthorInitials(item.author) }}</span>
                    </v-avatar>
                    <span class="text-caption">{{ item.author }}</span>
                  </div>
                </template>

                <template #item.updatedAt="{ item }">
                  <div>
                    <div class="text-body-2">{{ formatDate(item.updatedAt) }}</div>
                    <div class="text-caption text-grey">{{ formatRelativeTime(item.updatedAt) }}</div>
                  </div>
                </template>

                <template #item.actions="{ item }">
                  <v-menu>
                    <template v-slot:activator="{ props }">
                      <v-btn
                        v-bind="props"
                        icon="mdi-dots-vertical"
                        variant="text"
                        size="small"
                      ></v-btn>
                    </template>
                    <v-list>
                      <v-list-item @click="item.type === 'folder' ? openFolder(item) : openDocument(item)">
                        <v-list-item-title>
                          <v-icon class="mr-2">{{ item.type === 'folder' ? 'mdi-folder-open' : 'mdi-eye' }}</v-icon>
                          {{ item.type === 'folder' ? 'Ouvrir le dossier' : 'Voir le document' }}
                        </v-list-item-title>
                      </v-list-item>
                      <v-list-item @click="editItem(item)">
                        <v-list-item-title>
                          <v-icon class="mr-2">mdi-pencil</v-icon>
                          Modifier
                        </v-list-item-title>
                      </v-list-item>
                      <v-list-item @click="duplicateItem(item)">
                        <v-list-item-title>
                          <v-icon class="mr-2">mdi-content-copy</v-icon>
                          Dupliquer
                        </v-list-item-title>
                      </v-list-item>
                      <v-list-item @click="shareItem(item)">
                        <v-list-item-title>
                          <v-icon class="mr-2">mdi-share</v-icon>
                          Partager
                        </v-list-item-title>
                      </v-list-item>
                      <v-divider></v-divider>
                      <v-list-item @click="archiveItem(item)">
                        <v-list-item-title>
                          <v-icon class="mr-2">mdi-archive</v-icon>
                          Archiver
                        </v-list-item-title>
                      </v-list-item>
                      <v-list-item @click="deleteItem(item)" class="text-error">
                        <v-list-item-title>
                          <v-icon class="mr-2">mdi-delete</v-icon>
                          Supprimer
                        </v-list-item-title>
                      </v-list-item>
                    </v-list>
                  </v-menu>
                </template>
              </v-data-table>
            </template>

            <!-- Grid View -->
            <template v-else>
              <div class="pa-4">
                <v-row>
                  <v-col
                    v-for="item in filteredItems"
                    :key="item.id"
                    cols="12"
                    sm="6"
                    md="4"
                    lg="3"
                  >
                    <v-card
                      class="document-card"
                      :class="{ 'selected': selectedDocument?.id === item.id }"
                      @click="previewDocument(item)"
                      @dblclick="item.type === 'folder' ? openFolder(item) : openDocument(item)"
                    >
                      <v-card-text class="text-center pa-4">
                        <v-avatar size="64" :color="getTypeColor(item.type)" class="mb-3">
                          <v-icon size="32" color="white">
                            {{ item.type === 'folder' ? 'mdi-folder' : getDocumentIcon(item) }}
                          </v-icon>
                        </v-avatar>
                        
                        <div class="text-subtitle-1 font-weight-medium text-truncate mb-1">
                          {{ item.name }}
                        </div>
                        
                        <div v-if="item.description" class="text-caption text-grey text-truncate mb-2">
                          {{ item.description }}
                        </div>
                        
                        <div class="d-flex justify-space-between align-center text-caption text-grey">
                          <span>{{ formatDate(item.updatedAt) }}</span>
                          <span v-if="item.type !== 'folder'">{{ formatFileSize(item.size) }}</span>
                          <span v-else>{{ item.itemCount || 0 }} éléments</span>
                        </div>

                        <div v-if="item.tags && item.tags.length > 0" class="mt-2">
                          <v-chip
                            v-for="tag in item.tags.slice(0, 2)"
                            :key="tag"
                            size="x-small"
                            class="mr-1"
                            variant="outlined"
                          >
                            {{ tag }}
                          </v-chip>
                        </div>
                      </v-card-text>
                    </v-card>
                  </v-col>
                </v-row>
              </div>
            </template>
          </v-card-text>
        </v-card>
      </v-col>

      <!-- Document Preview Panel -->
      <v-col v-if="selectedDocument" cols="4">
        <v-card class="elevation-3 sticky-preview">
          <v-card-title class="d-flex justify-space-between align-center">
            <span>Aperçu</span>
            <v-btn
              icon="mdi-close"
              variant="text"
              size="small"
              @click="selectedDocument = null"
            ></v-btn>
          </v-card-title>
          
          <v-card-text>
            <div class="text-center mb-4">
              <v-avatar size="80" :color="getTypeColor(selectedDocument.type)">
                <v-icon size="40" color="white">
                  {{ selectedDocument.type === 'folder' ? 'mdi-folder' : getDocumentIcon(selectedDocument) }}
                </v-icon>
              </v-avatar>
            </div>

            <h3 class="text-h6 text-center mb-3">{{ selectedDocument.name }}</h3>
            
            <v-divider class="mb-3"></v-divider>

            <div class="mb-3">
              <div class="text-caption text-grey mb-1">Type</div>
              <v-chip :color="getTypeColor(selectedDocument.type)" size="small">
                {{ getTypeLabel(selectedDocument.type) }}
              </v-chip>
            </div>

            <div v-if="selectedDocument.description" class="mb-3">
              <div class="text-caption text-grey mb-1">Description</div>
              <div class="text-body-2">{{ selectedDocument.description }}</div>
            </div>

            <div class="mb-3">
              <div class="text-caption text-grey mb-1">Auteur</div>
              <div class="text-body-2">{{ selectedDocument.author }}</div>
            </div>

            <div class="mb-3">
              <div class="text-caption text-grey mb-1">Créé le</div>
              <div class="text-body-2">{{ formatDate(selectedDocument.createdAt) }}</div>
            </div>

            <div class="mb-3">
              <div class="text-caption text-grey mb-1">Modifié le</div>
              <div class="text-body-2">{{ formatDate(selectedDocument.updatedAt) }}</div>
            </div>

            <div v-if="selectedDocument.type !== 'folder'" class="mb-3">
              <div class="text-caption text-grey mb-1">Taille</div>
              <div class="text-body-2">{{ formatFileSize(selectedDocument.size) }}</div>
            </div>

            <div v-if="selectedDocument.tags && selectedDocument.tags.length > 0" class="mb-3">
              <div class="text-caption text-grey mb-1">Tags</div>
              <v-chip-group>
                <v-chip
                  v-for="tag in selectedDocument.tags"
                  :key="tag"
                  size="small"
                  variant="outlined"
                >
                  {{ tag }}
                </v-chip>
              </v-chip-group>
            </div>

            <v-divider class="my-3"></v-divider>

            <div class="d-flex flex-column gap-2">
              <v-btn
                color="primary"
                block
                prepend-icon="mdi-eye"
                @click="selectedDocument.type === 'folder' ? openFolder(selectedDocument) : openDocument(selectedDocument)"
              >
                {{ selectedDocument.type === 'folder' ? 'Ouvrir le dossier' : 'Voir le document' }}
              </v-btn>
              <v-btn
                variant="outlined"
                block
                prepend-icon="mdi-pencil"
                @click="editItem(selectedDocument)"
              >
                Modifier
              </v-btn>
              <v-btn
                variant="outlined"
                block
                prepend-icon="mdi-share"
                @click="shareItem(selectedDocument)"
              >
                Partager
              </v-btn>
            </div>
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>
                    </v-btn>
                    <v-btn
                      variant="outlined"
                      color="primary"
                      prepend-icon="mdi-folder-plus"
                      @click="showCreateFolderDialog = true"
                    >
                      Nouveau dossier
                    </v-btn>
                  </div>
                </div>
              </template>
          <template #item.name="{ item }">
            <div class="d-flex align-center">
              <v-icon class="mr-3" :color="item.type === 'folder' ? 'amber' : 'primary'">
                {{ item.type === 'folder' ? 'mdi-folder' : 'mdi-file-document' }}
              </v-icon>
              <div>
                <div class="font-weight-medium">{{ item.name }}</div>
                <div v-if="item.description" class="text-caption text-grey">{{ item.description }}</div>
              </div>
            </div>
          </template>

          <template #item.type="{ item }">
            <v-chip
              :color="item.type === 'folder' ? 'amber' : 'primary'"
              variant="flat"
              size="small"
            >
              {{ item.type === 'folder' ? 'Dossier' : 'Document' }}
            </v-chip>
          </template>

          <template #item.updatedAt="{ item }">
            {{ formatDate(item.updatedAt) }}
          </template>

          <template #item.actions="{ item }">
            <v-btn
              v-if="item.type === 'folder'"
              icon="mdi-folder-open"
              variant="text"
              size="small"
              @click="openFolder(item)"
            ></v-btn>
            <v-btn
              v-else
              icon="mdi-eye"
              variant="text"
              size="small"
              @click="openDocument(item)"
            ></v-btn>
            <v-btn
              icon="mdi-pencil"
              variant="text"
              size="small"
              @click="editItem(item)"
            ></v-btn>
            <v-btn
              icon="mdi-delete"
              variant="text"
              size="small"
              color="error"
              @click="deleteItem(item)"
            ></v-btn>
          </template>
        </v-data-table>
      </v-card-text>
    </v-card>

    <!-- Create Document Dialog -->
    <v-dialog v-model="showCreateDialog" max-width="500">
      <v-card>
        <v-card-title>Créer un nouveau document</v-card-title>
        <v-card-text>
          <v-form ref="createForm">
            <v-text-field
              v-model="newDocument.name"
              label="Nom du document"
              variant="outlined"
              :rules="nameRules"
              class="mb-3"
            ></v-text-field>
            <v-textarea
              v-model="newDocument.description"
              label="Description (optionnelle)"
              variant="outlined"
              rows="3"
            ></v-textarea>
            <v-select
              v-model="newDocument.type"
              :items="documentTypes"
              label="Type de document"
              variant="outlined"
            ></v-select>
          </v-form>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn text @click="showCreateDialog = false">Annuler</v-btn>
          <v-btn color="primary" @click="createDocument">Créer</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <!-- Create Folder Dialog -->
    <v-dialog v-model="showCreateFolderDialog" max-width="400">
      <v-card>
        <v-card-title>Créer un nouveau dossier</v-card-title>
        <v-card-text>
          <v-text-field
            v-model="newFolderName"
            label="Nom du dossier"
            variant="outlined"
            :rules="nameRules"
          ></v-text-field>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn text @click="showCreateFolderDialog = false">Annuler</v-btn>
          <v-btn color="primary" @click="createFolder">Créer</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
      </v-card-text>
    </v-card>
  </v-container>
</template>

<script>
import { ref, reactive, computed, onMounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { useToast } from 'vue-toastification'

export default {
  name: 'Documents',
  setup () {
    const router = useRouter()
    const route = useRoute()
    const toast = useToast()

    const loading = ref(false)
    const searchQuery = ref('')
    const sortBy = ref('updatedAt')
    const showCreateDialog = ref(false)
    const showCreateFolderDialog = ref(false)
    const newFolderName = ref('')
    const createForm = ref(null)
    const currentFolderId = ref(null)
    const currentPath = ref([])

    const newDocument = reactive({
      name: '',
      description: '',
      type: 'markdown'
    })

    // Mock data - in real app this would come from API
    const documents = ref([
      {
        id: 1,
        name: 'Guide de démarrage',
        description: 'Guide pour commencer avec Wiki App',
        type: 'document',
        folderId: null,
        updatedAt: '2024-01-15T10:30:00Z',
        createdBy: 'Admin'
      },
      {
        id: 2,
        name: 'Documentation',
        description: 'Dossier contenant la documentation technique',
        type: 'folder',
        folderId: null,
        updatedAt: '2024-01-14T15:20:00Z',
        createdBy: 'Admin'
      },
      {
        id: 3,
        name: 'Procédures',
        description: 'Procédures internes de l\'équipe',
        type: 'document',
        folderId: 2,
        updatedAt: '2024-01-13T09:15:00Z',
        createdBy: 'Admin'
      }
    ])

    const headers = [
      { title: 'Nom', key: 'name', sortable: true },
      { title: 'Type', key: 'type', sortable: true },
      { title: 'Modifié le', key: 'updatedAt', sortable: true },
      { title: 'Actions', key: 'actions', sortable: false, width: '120px' }
    ]

    const sortOptions = [
      { title: 'Date de modification', value: 'updatedAt' },
      { title: 'Nom', value: 'name' },
      { title: 'Type', value: 'type' }
    ]

    const documentTypes = [
      { title: 'Markdown', value: 'markdown' },
      { title: 'Document Word', value: 'docx' }
    ]

    const nameRules = [
      v => !!v || 'Le nom est requis',
      v => (v && v.length >= 2) || 'Le nom doit contenir au moins 2 caractères'
    ]

    const filteredItems = computed(() => {
      if (!documents.value || !Array.isArray(documents.value)) {
        return []
      }

      let items = documents.value.filter(doc => doc && doc.folderId === currentFolderId.value)

      if (searchQuery.value) {
        const query = searchQuery.value.toLowerCase()
        items = items.filter(item =>
          (item && item.name && item.name.toLowerCase().includes(query)) ||
          (item && item.description && item.description.toLowerCase().includes(query))
        )
      }

      return items.sort((a, b) => {
        if (!a || !b) return 0
        if (sortBy.value === 'name') {
          return (a.name || '').localeCompare(b.name || '')
        } else if (sortBy.value === 'type') {
          return (a.type || '').localeCompare(b.type || '')
        } else {
          return new Date(b.updatedAt || 0) - new Date(a.updatedAt || 0)
        }
      })
    })

    const breadcrumbItems = computed(() => {
      const items = [{ title: 'Accueil', folderId: null, disabled: false }]

      if (currentPath.value && Array.isArray(currentPath.value)) {
        currentPath.value.forEach((folder, index) => {
          if (folder && folder.name) {
            items.push({
              title: folder.name,
              folderId: folder.id,
              disabled: index === currentPath.value.length - 1
            })
          }
        })
      }

      return items
    })

    const formatDate = (dateString) => {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    }

    const navigateToFolder = (folderId) => {
      currentFolderId.value = folderId

      if (folderId === null) {
        currentPath.value = []
      } else {
        // Build path by finding parent folders
        const buildPath = (id, path = []) => {
          const folder = documents.value.find(d => d.id === id && d.type === 'folder')
          if (folder) {
            path.unshift(folder)
            if (folder.folderId !== null) {
              buildPath(folder.folderId, path)
            }
          }
          return path
        }
        currentPath.value = buildPath(folderId)
      }
    }

    const openFolder = (folder) => {
      navigateToFolder(folder.id)
    }

    const openDocument = (document) => {
      router.push(`/document/${document.id}`)
    }

    const editItem = (item) => {
      if (item.type === 'document') {
        router.push(`/document/${item.id}/edit`)
      } else {
        toast.info('Édition des dossiers en cours de développement')
      }
    }

    const deleteItem = (item) => {
      if (confirm(`Êtes-vous sûr de vouloir supprimer "${item.name}" ?`)) {
        const index = documents.value.findIndex(d => d.id === item.id)
        if (index > -1) {
          documents.value.splice(index, 1)
          toast.success(`${item.type === 'folder' ? 'Dossier' : 'Document'} supprimé avec succès`)
        }
      }
    }

    const createDocument = async () => {
      const { valid } = await createForm.value.validate()
      if (!valid) return

      const newDoc = {
        id: Date.now(),
        name: newDocument.name,
        description: newDocument.description,
        type: 'document',
        folderId: currentFolderId.value,
        updatedAt: new Date().toISOString(),
        createdBy: 'Utilisateur actuel'
      }

      documents.value.push(newDoc)
      toast.success('Document créé avec succès')

      // Reset form
      newDocument.name = ''
      newDocument.description = ''
      newDocument.type = 'markdown'
      showCreateDialog.value = false

      // Navigate to edit the document
      router.push(`/document/${newDoc.id}/edit`)
    }

    const createFolder = () => {
      if (newFolderName.value.trim()) {
        const newFolder = {
          id: Date.now(),
          name: newFolderName.value,
          description: '',
          type: 'folder',
          folderId: currentFolderId.value,
          updatedAt: new Date().toISOString(),
          createdBy: 'Utilisateur actuel'
        }

        documents.value.push(newFolder)
        toast.success('Dossier créé avec succès')

        newFolderName.value = ''
        showCreateFolderDialog.value = false
      }
    }

    const searchDocuments = () => {
      // Search is reactive through computed property
    }

    const sortDocuments = () => {
      // Sorting is reactive through computed property
    }

    onMounted(() => {
      // Check if we need to navigate to a specific folder from route params
      if (route.query.folder) {
        navigateToFolder(parseInt(route.query.folder))
      }
    })

    return {
      loading,
      searchQuery,
      sortBy,
      showCreateDialog,
      showCreateFolderDialog,
      newFolderName,
      createForm,
      newDocument,
      documents,
      headers,
      sortOptions,
      documentTypes,
      nameRules,
      filteredItems,
      breadcrumbItems,
      currentPath,
      formatDate,
      navigateToFolder,
      openFolder,
      openDocument,
      editItem,
      deleteItem,
      createDocument,
      createFolder,
      searchDocuments,
      sortDocuments
    }
  }
}
</script>
